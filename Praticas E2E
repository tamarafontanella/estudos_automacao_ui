Fonte: https://docs.gitlab.com/ee/development/testing_guide/end_to_end/best_practices.html

##Práticas recomendadas ao escrever testes end to end


A maioria dos testes end to end necessitam que uma pré-condição seja executada no aplicativo para que os testes aconteçam.
Um exemplo é o login do usuário para testar os demais recursos da aplicação.
Porém, se o login já foi coberto por um teste end to end através da interface gráfica de usuário (GUI), não existe motivo para sempre executa-lo antes dos testes.
Considera-se que o tempo de login é um tempo "disperdiçado" e aumenta conforme a quantidade de testes que dependem dele.
Uma alternativa de realizar um login de maneira mais rápida seria utilizar um endpoint (apenas para testes), onde é possível passar as credenciais do usuário com valores criptografados através de strings e em seguida ser direcionado para a página inicial registrada caso as credenciais sejam válidas, tornando o tempo na execução menor.

Existe outro motivo.

Partimos do principio de que você não siga a sugestão acima e dependa da interface gráfica de usuário (GUI) para a criação da pré-condição para testar um recurso específico. 
O que aconteceria se houvesse um bug nesta pré-condição? Considerando que a falha seja apenas na interface e sua API continua funcionando corretamente, neste caso muitos testes falhariam devido a inconsistência na interface da pré-condição.
Seguindo as práticas recomandedas, apenas um teste estaria falhando, permitindo que os demais sejam executados.

##Conclusão:

* O estado de construção através da GUI é demorado e não é sustentável à medida que a suíte de testes cresce.
* Quando dependemos apenas da GUI para criar o estado do aplicativo e os testes falham devido a problemas de front-end, não podemos confiar na taxa de falhas de teste e geramos uma taxa mais alta de falhas de teste.




