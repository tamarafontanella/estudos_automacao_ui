Fonte: https://seleniumhq.github.io/docs/wd.html

Resumo:

WEBDRIVER

Maior mudança do Selenium foi a inclusão da API do WebDriver recentemente.
Conhecido como Selenium 2 ou WebDriver.

-> WebDriver foi projetado em uma interface de programação mais simples e concisa e aborda
algumas limitações da API do Selenium-RC.
-> Impulsiona o navegador de maneira muito mais eficiente e supera as limitações do Selenium1, que afetavam a cobertura do teste funcional


Entendendo os Componentes:

API: Conjunto de comandos para manipular o WebDriver.
Biblioteca: Módulo de código que contém as APIs e o código necessário para implementá-las. As bibliotecas são específicas para cada extensão.
Driver: Responsável por controlar o navegador. São geralmente módulos executáveis que são executados no sistema com o próprio navegador
Framework: Biblioteca adicional usada como suporte para suítes do WebDriver. Exemplo: JUnit, NUnit, ou estruturas que suportam linguagens naturais, como o Cucumber e Robotium.

As partes e as peças:

Comunicação Direta: Bidirecional, WebDriver passa comandos para o navegador por meio do driver e recebe informações por meio da mesma rota.
Comunicação Remota: Utiliza Selenium Server ou RemoteWebDriver.  O RemoteWebDriver é executado no mesmo sistema que o driver e o navegador. 
A comunicação remota também pode ocorrer usando o Selenium Server ou o Selenium Grid, os quais, por sua vez, conversam com o driver no sistema host. 

Os Frameworks:

O WebDriver possui apenas um trabalho: comunicar-se com o navegador por meio de qualquer metodo acima (remoto ou direto).
O WebDriver não sabe nada sobre testes, ele não sabe como comparar as coisas, afirmar ou reprovar.
É aqui que os framework entram para jogo. Você precisará de uma estrutura de teste, por exemplo JUnit para JAva, RSPec para Ruby, etc.
A estrutura de teste é responsável por executar o seu WebDriver e as etapas relacionadas nos seus testes.




